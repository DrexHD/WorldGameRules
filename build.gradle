import org.jetbrains.changelog.Changelog

plugins {
    id 'fabric-loom' version '1.10-SNAPSHOT'
    id "me.modmuss50.mod-publish-plugin" version "0.8.4"
    id 'org.jetbrains.changelog' version '2.+'
}

version = "${mod_version}+${minecraft_version}"
group = project.maven_group

repositories {
    maven { url "https://oss.sonatype.org/content/repositories/snapshots" }
    maven { url "https://maven.nucleoid.xyz/" }
    maven { url "https://api.modrinth.com/maven" }
    maven { url "https://maven.ladysnake.org/releases" }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    modImplementation include(fabricApi.module("fabric-command-api-v2", project.fabric_version))
    // Handle mods passing a null DataFixTypes to a PersistentState.Type
    modImplementation include(fabricApi.module("fabric-object-builder-api-v1", project.fabric_version))
    modImplementation include("me.lucko:fabric-permissions-api:${project.permission_api_version}")
    modImplementation include("maven.modrinth:message-api:${project.message_api_version}")
    modImplementation include("eu.pb4:placeholder-api:${project.placeholder_api_version}")
    // Compat
    modImplementation fabricApi.module("fabric-game-rule-api-v1", project.fabric_version)
    modCompileOnly("org.ladysnake.cardinal-components-api:cardinal-components-base:${project.cca_version}")
}

processResources {
    inputs.property "version", project.version
    filteringCharset "UTF-8"

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

publishMods {
    file = remapJar.archiveFile
    changelog = fetchChangelog()
    type = STABLE
    displayName = "WorldGameRules ${version.get()}"
    modLoaders.add("fabric")
    modLoaders.add("quilt")
    modrinth {
        projectId = "Eie2vf4W"
        accessToken = providers.environmentVariable("MODRINTH_TOKEN")
        minecraftVersions.add(project.minecraft_version)
    }
    curseforge {
        projectId = "1039751"
        accessToken = providers.environmentVariable("CURSEFORGE_TOKEN")
        minecraftVersions.add(project.curseforge_minecraft_version)
    }
    github {
        accessToken = providers.environmentVariable("GITHUB_TOKEN")
        repository = providers.environmentVariable("GITHUB_REPOSITORY").getOrElse("DrexHD/dryrun")
        commitish = providers.environmentVariable("GITHUB_REF_NAME").getOrElse("dryrun")
    }
}

private String fetchChangelog() {
    def log = getChangelog.changelog.get()
    if (log.has(project.mod_version)) {
        return log.renderItem(
                log.get(project.mod_version).withHeader(false),
                Changelog.OutputType.MARKDOWN
        )
    } else {
        return ""
    }
}